package head;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;

import state.GameState;
import state.TestState;

public class Game implements Runnable{

	private boolean running;
	private Frame gameFrame;
	private GameState state;
	
	public static void main(String[] args){
		Game game = new Game();
		game.init();
		game.run();
	}

	@Override
	public void run() {
		while(running){
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			state.tick();
			render();
		}
	}
	
	private void init(){
		gameFrame = new Frame(800, 600);
		state = new TestState();
	}
	
	private void render(){
		
			BufferStrategy bs = Frame.getCanvas().getBufferStrategy();
			if(bs == null){
				Frame.getCanvas().createBufferStrategy(3);
				Frame.getCanvas().requestFocus();
				return;
			}
			
			Graphics2D g = null;
			
			do{
				try{
					
					g = (Graphics2D) bs.getDrawGraphics();
					
					g.setColor(Color.BLACK);
					g.fillRect(0, 0, Frame.getCanvas().getWidth(), Frame.getCanvas().getHeight());
					
					// Sets preferences for rendering / Sets rendering rules
					// KEY_ANTIALIASING reduces artifacts on shapes
					// VALUE_ANTIALIAS_ON will clean up the edges
					g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); 
					
					state.draw(g);
					
				}finally{g.dispose();}
			}while(bs.contentsLost());
			bs.show();
			Toolkit.getDefaultToolkit().sync();
		
	}
	
}
