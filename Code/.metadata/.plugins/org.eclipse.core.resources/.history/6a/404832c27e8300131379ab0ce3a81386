package head;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;

import state.GameState;
import state.TestState;

public class Game implements Runnable{

	private boolean running = true;
	private Frame gameFrame;
	private GameState state;
	
	public static final double TARGET_TPS = 100.0;
	public static final double TARGET_FPS = 200.0;
	
	public static void main(String[] args){
		Game game = new Game();
		game.init();
		game.run();
	}

	@Override
	public void run() {
		double previousTime = System.nanoTime();
		double currentTime = 0;
		double passedTime = 0;
		double timer = System.currentTimeMillis();
		double delta = 0;
//		double delta2 = 0;
		final double OPTIMAL_TPSTIME = 1000000000.0/TARGET_TPS;
		final double OPTIMAL_FPSTIME = 1000000000.0/TARGET_FPS;
		int fps = 0;
		int tps = 0;
		
		while(running){
			currentTime = System.nanoTime();
			passedTime = currentTime - previousTime;
			delta += passedTime / OPTIMAL_TPSTIME;
//			if(OptionsTrack.isFPSCap())
//				delta2 += passedTime / OPTIMAL_FPSTIME;
			previousTime = currentTime;
			
			if(delta >= 1){
//				getInput();
				state.tick();
				tps++;
				delta--;
			}
			
//			if(OptionsTrack.isFPSCap())
//				if(delta2 >= 1){
//					render();
//					fps++;
//					delta2--;
//				}
			
			render();
			fps++;
		
			if((System.currentTimeMillis() - timer) >= 1000){
				timer += 1000;
				//Display.getFrame().setTitle(TITLE + "  ||  " + tps + " tps, " + fps +  " fps");
				System.out.println(tps + " tps, " + fps +  " fps");
				tps = 0;
				fps = 0;
			}
		}
	}
	
	private void init(){
		gameFrame = new Frame(800, 600);
		state = new TestState();
	}
	
	private void render(){
		BufferStrategy bs = Frame.getCanvas().getBufferStrategy();
		if(bs == null){
			Frame.getCanvas().createBufferStrategy(3);
			Frame.getCanvas().requestFocus();
			return;
		}
			
		Graphics2D g = null;
			
		do{
			try{
					
				g = (Graphics2D) bs.getDrawGraphics();
				
				g.setColor(Color.BLACK);
				g.fillRect(0, 0, Frame.getCanvas().getWidth(), Frame.getCanvas().getHeight());
				
				// Sets preferences for rendering / Sets rendering rules
				// KEY_ANTIALIASING reduces artifacts on shapes
				// VALUE_ANTIALIAS_ON will clean up the edges
				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); 
				
				state.draw(g);
				
			}finally{g.dispose();}
		}while(bs.contentsLost());
		bs.show();
		Toolkit.getDefaultToolkit().sync();
		
	}
	
}
